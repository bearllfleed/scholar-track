// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: achieve.proto

package server

import (
	"context"

	"github.com/bearllfleed/scholar-track/rpc/achieve/achieve"
	"github.com/bearllfleed/scholar-track/rpc/achieve/internal/logic/categoryservice"
	"github.com/bearllfleed/scholar-track/rpc/achieve/internal/svc"
)

type CategoryServiceServer struct {
	svcCtx *svc.ServiceContext
	achieve.UnimplementedCategoryServiceServer
}

func NewCategoryServiceServer(svcCtx *svc.ServiceContext) *CategoryServiceServer {
	return &CategoryServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *CategoryServiceServer) CreateCategory(ctx context.Context, in *achieve.CreateCategoryReq) (*achieve.CreateCategoryResp, error) {
	l := categoryservicelogic.NewCreateCategoryLogic(ctx, s.svcCtx)
	return l.CreateCategory(in)
}

func (s *CategoryServiceServer) QueryCategoryDetail(ctx context.Context, in *achieve.QueryCategoryDetailReq) (*achieve.QueryCategoryResp, error) {
	l := categoryservicelogic.NewQueryCategoryDetailLogic(ctx, s.svcCtx)
	return l.QueryCategoryDetail(in)
}

func (s *CategoryServiceServer) QueryCategoryList(ctx context.Context, in *achieve.QueryCategoryListReq) (*achieve.QueryCategoryListResp, error) {
	l := categoryservicelogic.NewQueryCategoryListLogic(ctx, s.svcCtx)
	return l.QueryCategoryList(in)
}

func (s *CategoryServiceServer) DeleteCategory(ctx context.Context, in *achieve.DeleteCategoryReq) (*achieve.DeleteCategoryResp, error) {
	l := categoryservicelogic.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

func (s *CategoryServiceServer) UpdateCategory(ctx context.Context, in *achieve.UpdateCategoryReq) (*achieve.UpdateCategoryResp, error) {
	l := categoryservicelogic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}
