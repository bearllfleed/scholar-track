// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: achieve.proto

package categoryservice

import (
	"context"

	"github.com/bearllfleed/scholar-track/rpc/achieve/achieve"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Category                = achieve.Category
	CreateCategoryReq       = achieve.CreateCategoryReq
	CreateCategoryResp      = achieve.CreateCategoryResp
	CreatePropertyReq       = achieve.CreatePropertyReq
	CreatePropertyResp      = achieve.CreatePropertyResp
	DeleteAchieveReq        = achieve.DeleteAchieveReq
	DeleteAchieveResp       = achieve.DeleteAchieveResp
	DeleteCategoryReq       = achieve.DeleteCategoryReq
	DeleteCategoryResp      = achieve.DeleteCategoryResp
	DeletePropertyReq       = achieve.DeletePropertyReq
	DeletePropertyResp      = achieve.DeletePropertyResp
	Property                = achieve.Property
	QueryCategoryDetailReq  = achieve.QueryCategoryDetailReq
	QueryCategoryListReq    = achieve.QueryCategoryListReq
	QueryCategoryListResp   = achieve.QueryCategoryListResp
	QueryCategoryResp       = achieve.QueryCategoryResp
	QueryPropertyDetailReq  = achieve.QueryPropertyDetailReq
	QueryPropertyDetailResp = achieve.QueryPropertyDetailResp
	QueryPropertyListReq    = achieve.QueryPropertyListReq
	QueryPropertyListResp   = achieve.QueryPropertyListResp
	UpdateCategoryReq       = achieve.UpdateCategoryReq
	UpdateCategoryResp      = achieve.UpdateCategoryResp
	UpdatePropertyReq       = achieve.UpdatePropertyReq
	UpdatePropertyResp      = achieve.UpdatePropertyResp
	UploadAchieveReq        = achieve.UploadAchieveReq
	UploadAchieveResp       = achieve.UploadAchieveResp

	CategoryService interface {
		CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryResp, error)
		QueryCategoryDetail(ctx context.Context, in *QueryCategoryDetailReq, opts ...grpc.CallOption) (*QueryCategoryResp, error)
		QueryCategoryList(ctx context.Context, in *QueryCategoryListReq, opts ...grpc.CallOption) (*QueryCategoryListResp, error)
		DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error)
		UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error)
	}

	defaultCategoryService struct {
		cli zrpc.Client
	}
)

func NewCategoryService(cli zrpc.Client) CategoryService {
	return &defaultCategoryService{
		cli: cli,
	}
}

func (m *defaultCategoryService) CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryResp, error) {
	client := achieve.NewCategoryServiceClient(m.cli.Conn())
	return client.CreateCategory(ctx, in, opts...)
}

func (m *defaultCategoryService) QueryCategoryDetail(ctx context.Context, in *QueryCategoryDetailReq, opts ...grpc.CallOption) (*QueryCategoryResp, error) {
	client := achieve.NewCategoryServiceClient(m.cli.Conn())
	return client.QueryCategoryDetail(ctx, in, opts...)
}

func (m *defaultCategoryService) QueryCategoryList(ctx context.Context, in *QueryCategoryListReq, opts ...grpc.CallOption) (*QueryCategoryListResp, error) {
	client := achieve.NewCategoryServiceClient(m.cli.Conn())
	return client.QueryCategoryList(ctx, in, opts...)
}

func (m *defaultCategoryService) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error) {
	client := achieve.NewCategoryServiceClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}

func (m *defaultCategoryService) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error) {
	client := achieve.NewCategoryServiceClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}
