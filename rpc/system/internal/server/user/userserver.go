// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: system.proto

package server

import (
	"context"

	"github.com/bearllflee/scholar-track/rpc/system/internal/logic/user"
	"github.com/bearllflee/scholar-track/rpc/system/internal/svc"
	"github.com/bearllflee/scholar-track/rpc/system/system"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	system.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) QueryUserDetail(ctx context.Context, in *system.QueryUserDetailReq) (*system.QueryUserDetailResp, error) {
	l := userlogic.NewQueryUserDetailLogic(ctx, s.svcCtx)
	return l.QueryUserDetail(in)
}

func (s *UserServer) QueryUserList(ctx context.Context, in *system.QueryUserListReq) (*system.QueryUserListResp, error) {
	l := userlogic.NewQueryUserListLogic(ctx, s.svcCtx)
	return l.QueryUserList(in)
}

func (s *UserServer) FindUserByUsername(ctx context.Context, in *system.FindUserByUsernameReq) (*system.FindUserByUsernameResp, error) {
	l := userlogic.NewFindUserByUsernameLogic(ctx, s.svcCtx)
	return l.FindUserByUsername(in)
}

func (s *UserServer) Register(ctx context.Context, in *system.RegisterReq) (*system.RegisterResp, error) {
	l := userlogic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServer) SetUserInfo(ctx context.Context, in *system.SetUserInfoReq) (*system.SetUserInfoResp, error) {
	l := userlogic.NewSetUserInfoLogic(ctx, s.svcCtx)
	return l.SetUserInfo(in)
}

func (s *UserServer) SetSelfInfo(ctx context.Context, in *system.SetSelfInfoReq) (*system.SetSelfInfoResp, error) {
	l := userlogic.NewSetSelfInfoLogic(ctx, s.svcCtx)
	return l.SetSelfInfo(in)
}

func (s *UserServer) QuerySelfInfo(ctx context.Context, in *system.QuerySelfInfoReq) (*system.QuerySelfInfoResp, error) {
	l := userlogic.NewQuerySelfInfoLogic(ctx, s.svcCtx)
	return l.QuerySelfInfo(in)
}

func (s *UserServer) SetUserRole(ctx context.Context, in *system.SetUserRoleReq) (*system.SetUserRoleResp, error) {
	l := userlogic.NewSetUserRoleLogic(ctx, s.svcCtx)
	return l.SetUserRole(in)
}

func (s *UserServer) ResetPassword(ctx context.Context, in *system.ResetPasswordReq) (*system.ResetPasswordResp, error) {
	l := userlogic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

func (s *UserServer) ChangePassword(ctx context.Context, in *system.ChangePasswordReq) (*system.ChangePasswordResp, error) {
	l := userlogic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

func (s *UserServer) DeleteUser(ctx context.Context, in *system.DeleteUserReq) (*system.DeleteUserResp, error) {
	l := userlogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}
