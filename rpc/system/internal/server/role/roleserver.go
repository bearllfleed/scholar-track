// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: system.proto

package server

import (
	"context"

	"github.com/bearllflee/scholar-track/rpc/system/internal/logic/role"
	"github.com/bearllflee/scholar-track/rpc/system/internal/svc"
	"github.com/bearllflee/scholar-track/rpc/system/system"
)

type RoleServer struct {
	svcCtx *svc.ServiceContext
	system.UnimplementedRoleServer
}

func NewRoleServer(svcCtx *svc.ServiceContext) *RoleServer {
	return &RoleServer{
		svcCtx: svcCtx,
	}
}

func (s *RoleServer) AddRole(ctx context.Context, in *system.AddRoleReq) (*system.AddRoleResp, error) {
	l := rolelogic.NewAddRoleLogic(ctx, s.svcCtx)
	return l.AddRole(in)
}

func (s *RoleServer) DeleteRole(ctx context.Context, in *system.DeleteRoleReq) (*system.DeleteRoleResp, error) {
	l := rolelogic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

func (s *RoleServer) UpdateRole(ctx context.Context, in *system.UpdateRoleReq) (*system.UpdateRoleResp, error) {
	l := rolelogic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

func (s *RoleServer) RoleTree(ctx context.Context, in *system.RoleTreeReq) (*system.RoleTreeListResp, error) {
	l := rolelogic.NewRoleTreeLogic(ctx, s.svcCtx)
	return l.RoleTree(in)
}

func (s *RoleServer) SetRolePolicies(ctx context.Context, in *system.SetRolePoliciesReq) (*system.SetRolePoliciesResp, error) {
	l := rolelogic.NewSetRolePoliciesLogic(ctx, s.svcCtx)
	return l.SetRolePolicies(in)
}

func (s *RoleServer) QueryRolePolicies(ctx context.Context, in *system.QueryRolePoliciesReq) (*system.QueryRolePoliciesResp, error) {
	l := rolelogic.NewQueryRolePoliciesLogic(ctx, s.svcCtx)
	return l.QueryRolePolicies(in)
}
