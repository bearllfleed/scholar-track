// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"net/http"

	achievementbasic "github.com/bearllflee/scholar-track/api/internal/handler/achievement/basic"
	achievementcategory "github.com/bearllflee/scholar-track/api/internal/handler/achievement/category"
	achievementproperty "github.com/bearllflee/scholar-track/api/internal/handler/achievement/property"
	api "github.com/bearllflee/scholar-track/api/internal/handler/api"
	casbin "github.com/bearllflee/scholar-track/api/internal/handler/casbin"
	dictionary "github.com/bearllflee/scholar-track/api/internal/handler/dictionary"
	dictionary_detail "github.com/bearllflee/scholar-track/api/internal/handler/dictionary_detail"
	file "github.com/bearllflee/scholar-track/api/internal/handler/file"
	menu "github.com/bearllflee/scholar-track/api/internal/handler/menu"
	role "github.com/bearllflee/scholar-track/api/internal/handler/role"
	user "github.com/bearllflee/scholar-track/api/internal/handler/user"
	"github.com/bearllflee/scholar-track/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/achievement",
				Handler: achievementbasic.UploadAchievementHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/category",
				Handler: achievementcategory.QueryCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/category",
				Handler: achievementcategory.AddCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/category",
				Handler: achievementcategory.UpdateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/category/:id",
				Handler: achievementcategory.DeleteCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/category/:id",
				Handler: achievementcategory.QueryCategoryDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/property",
				Handler: achievementproperty.QueryPropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property",
				Handler: achievementproperty.AddPropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/property",
				Handler: achievementproperty.UpdatePropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/property/:id",
				Handler: achievementproperty.DeletePropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/property/:id",
				Handler: achievementproperty.QueryPropertyDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api",
				Handler: api.CreateApiHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api",
				Handler: api.QueryAllApiHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api",
				Handler: api.UpdateApiHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/:id",
				Handler: api.DeleteApiHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/:id",
				Handler: api.QueryApiDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/casbin/addPolicies",
				Handler: casbin.AddPoliciesHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/dictionary",
				Handler: dictionary.CreateDictionaryHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/dictionary",
				Handler: dictionary.UpdateDictionaryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/dictionary/:id",
				Handler: dictionary.DeleteDictionaryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/dictionary/:id",
				Handler: dictionary.QueryDictionaryDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dictionary/list",
				Handler: dictionary.QueryDictionaryListHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/dictionary/detail",
				Handler: dictionary_detail.CreateDictionaryDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/dictionary/detail",
				Handler: dictionary_detail.UpdateDictionaryDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/dictionary/detail/:id",
				Handler: dictionary_detail.DeleteDictionaryDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodDelete,
				Path:    "/file/:id",
				Handler: file.DeleteFileHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/file/:id",
				Handler: file.QueryFileDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/file/bussiness",
				Handler: file.GetBussinessFilesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/file/download/:id",
				Handler: file.DownloadFileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/upload",
				Handler: file.UploadFileHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/file/url",
				Handler: file.GetFileUrlHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/menu",
				Handler: menu.CreateMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/menu",
				Handler: menu.UpdateMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/menu/:id",
				Handler: menu.QueryMenuDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/menu/:id",
				Handler: menu.DeleteMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/menu/all",
				Handler: menu.QueryAllMenuTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/menu/role",
				Handler: menu.UpdateRoleMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/menu/role/:roleId",
				Handler: menu.QueryRoleMenuTreeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodDelete,
				Path:    "/role/:id",
				Handler: role.DeleteRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/add",
				Handler: role.AddRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/role/queryRolePolicies/:roleId",
				Handler: role.QueryRolePoliciesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/setRoleInfo",
				Handler: role.SetRoleInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/setRolePolicies",
				Handler: role.SetRolePoliciesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/tree",
				Handler: role.RoleTreeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/:id",
				Handler: user.QueryUserDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/user/:id",
				Handler: user.DeleteUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/changePassword",
				Handler: user.ChangePasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/list",
				Handler: user.QueryUserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/resetPassword",
				Handler: user.ResetPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/selfInfo",
				Handler: user.QuerySelfInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/setSelfInfo",
				Handler: user.SetSelfInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/setUserInfo",
				Handler: user.SetUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/setUserRole",
				Handler: user.SetUserRoleHandler(serverCtx),
			},
		},
	)
}
